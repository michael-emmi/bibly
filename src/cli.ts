#!/usr/bin/env node

import Debug from 'debug';
import meow from 'meow';
import * as fs from 'fs-extra';
import { fail } from 'assert';
import { readConfig, Config } from './config';
import { getRecord, isRecord } from './record';
import { getEntries } from './entry';

const debug = Debug('bibly:cli');

interface PackageInfo {
    name: string;
    version: string;
    homepage: string;
}

const cli = meow(`
  Usage
    $ bibly

  Options
    --help            Show this message

  Examples
    $ bibly
`);

(async () => main())();

async function main() {
    const packageInfo: PackageInfo = cli.pkg;
    console.log(`${packageInfo.name} version ${packageInfo.version}`);

    let code = 0;

    const config = await readConfig('bibly.json');
    const entries = await readEntries(config);
    const records: { [db: string]: string[] } = {};

    for (const entry of entries) {
        const record = await getRecord(entry, config.databases);
        if (!isRecord(record)) {
            console.log(`unable to fetch entry: ${record.key}`);
            console.log(record.error);
            code++;

        } else {
            records[record.db] = records[record.db] || [];
            records[record.db].push(record.record)
        }
    }

    for (const db of Object.keys(config.databases)) {
        fs.writeFileSync(config.databases[db].file, bibliography(packageInfo, records[db] || []));
    }

    process.exit(code);
}

async function readEntries(config: Config): Promise<string[]> {
    let entries: string[];

    if (config.latex) {
        entries = await getEntries(config.latex, config.databases);

    } else if (!process.stdin.isTTY) {
        entries = (await fs.readFile(0, 'utf-8')).split('\n').filter(x => x);

    } else {
        cli.showHelp();
        fail('unreachable code');
    }

    return config.sort ? entries.sort() : entries;
}

function bibliography(packageInfo: PackageInfo, records: string[]): string {
    return `% generated by ${packageInfo.name}: ${packageInfo.homepage}\n\n${records.join('\n')}`;
}
